import datetime
import os.path

import telebot

import markups
import phrases
from analysis import pie_analysis, graphic_analysis
from goal import has_goal, read_goal
from purchase_info import PURCHASE_PATH, read_purchase, PurchaseInfo, purchase_to_str


def query_callback(e: telebot.types.CallbackQuery, bot_client: telebot.TeleBot, text: str, markup):
    try:
        bot_client.answer_callback_query(e.id)
        bot_client.send_message(chat_id=e.message.chat.id,
                                text=text,
                                parse_mode='Markdown',
                                reply_markup=markup)
    except:
        print("[Markup] Error")


def pie_callback_handler(e: telebot.types.CallbackQuery, bot_client: telebot.TeleBot):
    try:
        bot_client.answer_callback_query(e.id)
        purchases = read_purchase(e.message.chat.id)
        pie_analysis(purchases, e.message.chat.id)
        if os.path.exists(f'data/pies/{e.message.chat.id}.png'):
            bot_client.send_photo(
                chat_id=e.message.chat.id,
                photo=open(f'data/pies/{e.message.chat.id}.png', 'rb'),
                caption="–í–æ—Ç *–ö—Ä—É–≥–æ–≤–∞—è –î–∏–∞–≥—Ä–∞–º–º–∞* –í–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:",
                parse_mode='Markdown'
            )
    except Exception as ex:
        print(f"[Markup] Error {ex}")


def graphic_callback_handler(e: telebot.types.CallbackQuery, bot_client: telebot.TeleBot):
    try:
        bot_client.answer_callback_query(e.id)
        purchases = read_purchase(e.message.chat.id)
        graphic_analysis(purchases, e.message.chat.id)
        print(os.path.exists(f'data/graphics/{e.message.chat.id}.png'))
        if os.path.exists(f'data/graphics/{e.message.chat.id}.png'):
            bot_client.send_photo(
                chat_id=e.message.chat.id,
                photo=open(f'data/graphics/{e.message.chat.id}.png', 'rb'),
                caption="–í–æ—Ç *–ì—Ä–∞—Ñ–∏–∫* –í–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–∞—Ç–∞–º:",
                parse_mode='Markdown'
            )
    except Exception as ex:
        print(f"[Markup] Error {ex}")


def goal_show_callback_handler(e: telebot.types.CallbackQuery, bot_client: telebot.TeleBot):
    try:
        if not has_goal(e.message.chat.id):
            bot_client.send_message(chat_id=e.message.chat.id,
                                    text=phrases.NO_GOAL_REPLY,
                                    parse_mode='Markdown',
                                    reply_markup=markups.force)
        else:
            goal = read_goal(e.message.chat.id)
            text = f"*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –∫–æ–ø–∏—Ç–µ –Ω–∞ {goal.name}* üí∏\n\n" + \
                   f"–î–æ —Ü–µ–ª–∏ ‚û° *{goal.price} {goal.currency}*"
            bot_client.send_message(chat_id=e.message.chat.id,
                                    text=text,
                                    parse_mode='Markdown',
                                    reply_markup=markups.goal_markup)
    except Exception:
        print("[Markup] Error")


def message_output(e: telebot.types.CallbackQuery, bot_client: telebot.TeleBot, func, output_type: str):
    try:
        if os.path.exists(f'{PURCHASE_PATH}/{e.message.chat.id}.json'):
            purchases = read_purchase(e.message.chat.id)
            print(purchases)
            purchases_today = list(filter(func, purchases))
            if len(purchases_today):
                text = purchase_to_str(purchases_today)
                text = f"*–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ –≤–∏–¥–∞ –∑–∞ {output_type} üìù:*\n" + \
                       "_–ù–∞–∑–≤–∞–Ω–∏–µ –¶–µ–Ω–∞ –í–∞–ª—é—Ç–∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –î–∞—Ç–∞_\n\n" + \
                       text
                bot_client.send_message(chat_id=e.message.chat.id,
                                        text=text,
                                        parse_mode='Markdown',
                                        reply_markup=markups.analysis_markup)
            else:
                text = f"*–•–º, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–æ—á–∫–∞ ü§®*\n" + \
                       f"*–ü–æ—Ö–æ–∂–µ, —É –í–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫ –∑–∞ {output_type} üìù*\n\n" + \
                       f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /add\\_expense, —á—Ç–æ–±—ã –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å üôÉ"
                bot_client.send_message(chat_id=e.message.chat.id,
                                        text=text,
                                        parse_mode='Markdown',
                                        reply_markup=markups.menu_markup)
        else:
            bot_client.send_message(chat_id=e.message.chat.id,
                                    text=phrases.NO_JSON_MESSAGE,
                                    parse_mode='Markdown',
                                    reply_markup=markups.menu_markup)

    except Exception as ex:
        print(f"[Markup] Error {ex}")


def output_today_callback_handler(e: telebot.types.CallbackQuery, bot_client: telebot.TeleBot):
    def check_today(purchase: PurchaseInfo):
        return purchase.date.month == datetime.datetime.today().month and \
               purchase.date.year == datetime.datetime.today().year and \
               purchase.date.day == datetime.datetime.today().day

    message_output(e, bot_client, check_today, '—Å–µ–≥–æ–¥–Ω—è')


def month_callback_handler(e: telebot.types.CallbackQuery, bot_client: telebot.TeleBot):
    def check_month(purchase: PurchaseInfo):
        return purchase.date.month == datetime.datetime.today().month and \
               purchase.date.year == datetime.datetime.today().year

    message_output(e, bot_client, check_month, '—ç—Ç–æ—Ç –º–µ—Å—è—Ü')


def all_time_callback_handler(e: telebot.types.CallbackQuery, bot_client: telebot.TeleBot):
    def check_all(_: PurchaseInfo):
        return True

    message_output(e, bot_client, check_all, '–≤—Å–µ –≤—Ä–µ–º—è')
